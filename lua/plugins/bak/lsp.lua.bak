return {
	{
		'folke/neodev.nvim',
		opts = {},
	},
	{
		"williamboman/mason.nvim",
		opts = {
			ui = {
				border = "rounded",
				icons = {
					package_installed = "✓",
					package_pending = "➜",
					package_uninstalled = "✗",
				},
			},
		},
	},
	{
		'williamboman/mason-lspconfig.nvim',
		opts = {
			ensure_installed = {
				"clangd",
				"cssls",
				"emmet_language_server",
				"html",
				"jsonls",
				"lua_ls",
				"pylsp",
				"rust_analyzer",
				"tsserver",
			},
			auto_install = true,
		},
	},
	{
		'neovim/nvim-lspconfig',
		dependencies = {
			'folke/neodev.nvim',
			"williamboman/mason.nvim",
			'williamboman/mason-lspconfig.nvim',
		},
		config = function()
			local keymap = vim.keymap

			local opts = { noremap = true, silent = true }
			local on_attach = function(_, bufnr)
				opts.buffer = bufnr
				keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts) -- smart rename
				keymap.set("n", "<leader>rs", ":LspRestart<CR>", opts) -- mapping to restart lsp if necessary
				keymap.set("n", "K", vim.lsp.buf.hover, opts)
				keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts)
				keymap.set("n", "gd", vim.lsp.buf.definition, opts)
				keymap.set("n", "gr", vim.lsp.buf.references, opts)
				keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts)
			end

			local capabilities = vim.lsp.protocol.make_client_capabilities()
			capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

			local lspconfig = require("lspconfig")

			lspconfig.tsserver.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.html.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.lua_ls.setup({
				capabilities = capabilities,
				on_attach = on_attach,
				settings = { -- custom settings for lua
					Lua = {
						diagnostics = {
							globals = { "vim" },
							disable = { 'missing-fields' },
						},
						workspace = {
							checkThirdParty = false,
							library = {
								[vim.fn.expand("$VIMRUNTIME/lua")] = true,
								[vim.fn.stdpath("config") .. "/lua"] = true,
							},
						},
						telemetry = { enable = false },
					},
				},
			})
			lspconfig.clangd.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.cssls.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.jsonls.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.emmet_language_server.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.pylsp.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.rust_analyzer.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
			lspconfig.bashls.setup({
				capabilities = capabilities,
				on_attach = on_attach,
			})
		end
	}
}
